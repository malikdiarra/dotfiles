#package definition
snippet setup
	#!/usr/bin/env python

	from setuptools import setup, find_packages

	setup(name="${1:package_name}",
	      version="0.1",
	      description="${2:description}",
	      author="Malik Diarra",
	      author_email="malik.diarra@gmail.com",
	      packages=find_packages(), # other option is ['package_name']
	      url="http://www.mbzdr.com",
	      license="BSD",
	      classifiers=['Development Status :: 4 - Beta', ],
	      install_requires=[]) # ["some_package>='1.3.4','other_package=1,>=2,!=2.1']
snippet djAdmin
	class ${1:ModelName}Admin(admin.ModelAdmin):
		fields = (${2:fields_list})
		exlude = (${3:excluded_fields})

	admin.site.register($1, $1Admin)
snippet djForm
	class ${1:ModelName}Form(forms.ModelForm):

		class Meta:
			model = $1
			exclude = (${2:exluded_fields})
			fields = (${3:fields_list})
snippet djModel
	class ${1:ModelName}(models.Model):
		name = models.CharField(max_length=200)
		slug = models.SlugField()

		class Meta:
			ordering = ['name']

		def __unicode__(self):
			return u'%s' % self.name

		def save(self, *args, **kwargs):
			if not self.slug:
				self.slug = slugify(self.name)
			super($1, self).save(*args, **kwargs)

		@models.permalink
		def get_absolute_url(self,):
			return ('${2:detail_view_name }', (), {"slug": self.slug})
snippet djUrl
	admin.autodiscover()

	urlpatterns = patterns(
		'',
		url(r'^$', "path.to.the.view", name="home"),
		url(r'^video/', include('video.urls')),
		url("^actor/(?P<slug>[\w-]+)/delete/$", DeletePerson.as_view(),
				name="person_delete"),
		url(r'^admin/', include(admin.site.urls)),
		)
	if settings.DEBUG:
		urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)
		urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
snippet DetailClass
	class ${1:model}Detail(DetailView):
		template_name = "${2:app}/${3:lower_case_class}_detail.html"
		context_object_name = "$3"
		model = $1
snippet ListClass
	class ${1:model}List(ListView):
		template_name = "${2:app_name}/${3:lower_case_class}_list.html"
		context_object_name = "$3s"
		model = $1
		paginate_by = 20
snippet CreateClass
	class Create${1:Model}(CreateView):
		model = $1
		fields = [${2:fields}]
#snippet CreateClass
#	class Create${1:Model}(CreateView):
#		model = $1
#		fields = [${2:fields}]
#
#		def get_success_url(self,):
#					return ${3:actual_object_url}
#
#		def get_form(self, form_class):
#				form = super(Create$1, self).get_form(form_class)
#
#				if form.is_valid() and hasattr(form, 'cleaned_data'):
#						slug = self.kwargs['slug']
#						$4 = $5.objects.get(slug=slug)
#						form.instance.$6 = $4
#
#				return form
snippet UpdateClass
	class Update${1:model}(UpdateView):
		model = $1
		fields = [${2:fields}]
snippet DeleteClass
	class Delete${1:model}(DeleteView):
		model = $1
		success_url = reverse_lazy(${2:url})
